<resources>

    <string name="regular_text" translatable="false">This is a regular text without monospace</string>
    <string name="monospace_text" translatable="false">This text contains |monospace| formatting</string>

    <string name="app_name">Jetpack Tutorial</string>
    <string name="back_again_to_close">Back again to close the app</string>
    <string name="settings">Settings</string>
    <string name="select_app_language">Select app language</string>
    <string name="polish">Polish</string>
    <string name="english">English</string>

    <string name="completed">Completed</string>
    <string name="completed_percent">Completed %1$d%%</string>

    <string name="app_theme">App theme</string>
    <string name="theme_auto">Auto</string>
    <string name="theme_light">Light</string>
    <string name="theme_dark">Dark</string>

    <!-- Groups -->
    <string name="course_getting_started">Getting Started with Jetpack Compose</string>
    <string name="course_layouts_elements">Layouts and UI elements</string>
    <string name="course_theming_styling">Theming and styling</string>
    <string name="course_getting_started_description">Learn the basics of Jetpack Compose, including setting up your environment and creating your first composable.</string>
    <string name="course_layout_description">Dive into Compose layouts, theming, and styling your app.</string>
    <string name="curse_state_navigation_description">Manage state effectively and navigate between screens in your Compose app.</string>
    <string name="course_advanced_description">Explore advanced Jetpack Compose topics like animations, custom layouts, and performance optimization.</string>
    <string name="TODO" translatable="false">!!TODO!!</string>
    <string name="lesson_getting_started_1_1" translatable="false">Getting Started 1 - 1</string>
    <string name="lesson_getting_started_1_2" translatable="false">Getting Started 1 - 2</string>
    <string name="lesson_getting_started_1_3" translatable="false">Getting Started 1 - 3</string>
    <string name="popup_continue">Continue</string>
    <string name="swipe_to_dismiss">Swipe to dismiss</string>
    <string name="lesson_completed">Lesson completed</string>

    <!-- Lessons -->
    <plurals name="lesson_pages">
        <item quantity="one">%d page</item>
        <item quantity="other">%d pages</item>
    </plurals>

    <plurals name="incorrect_answers">
        <item quantity="one">incorrect answer.</item>
        <item quantity="many">incorrect answers</item>
    </plurals>

    <string name="compose_introduction_title">What is Jetpack Compose?</string>
    <string name="setting_up_environment_title">Setting up environment</string>
    <string name="creating_first_component_title">Creating first component</string>
    <string name="completed_n_of">Completed %1$d of %2$d lessons</string>
    <string name="course_compose_basics">Jetpack Compose Basics</string>
    <string name="course_state_lifecycle">State and Lifecycle</string>
    <string name="course_interactivity_navigation">Interactivity and Navigation</string>
    <string name="course_animations_transitions">Animation and Transitions</string>
    <string name="course_advanced">Advanced</string>
    <string name="clear_all_progress">Clear all progress</string>
    <string name="dialog_cancel">Cancel</string>
    <string name="dialog_clear_progress">Clear progress</string>
    <string name="dialog_clear_title">Clear all progress</string>
    <string name="dialog_clear_text">Are you sure you want to reset your progress for all courses? This action cannot be undone.</string>
    <string name="popup_start">Get started</string>
    <string name="enabled">Enabled</string>
    <string name="disabled">Disabled</string>
    <string name="select_app_theme">Select app theme</string>
    <string name="app_language">App language</string>
    <string name="lesson_popup">Next lesson</string>
    <string name="lesson_popup_options">Display next lesson</string>
    <string name="lesson_text_title">Displaying text</string>
    <string name="text_8_heading">Configure text layout</string>
    <string name="font_small">Small</string>
    <string name="font_medium">Medium</string>
    <string name="font_big">Big</string>
    <string name="code_listing_font">Code listing font</string>
    <string name="select_listing_font">Select code listing font</string>
    <string name="text_1_heading">Displaying basic text</string>
    <string name="text_1_1">The simplest way to display text is to use the |Text| composable.\nIt has one required parameter: the string to display.</string>
    <string name="text_1_2">This code will display the following text:</string>
    <string name="text_2_heading">Styling text</string>
    <string name="text_2_1">The |Text| composable has multiple optional parameters that you can use to change its content appearance.</string>
    <string name="text_2_2">Change text color:</string>
    <string name="text_2_3">Change text size:</string>
    <string name="text_4_heading">Modifying font</string>
    <string name="text_4_1">Make text italic:</string>
    <string name="text_4_2">Make text bold:</string>
    <string name="text_4_3">Jetpack Compose also provides other font weights: |Thin|, |ExtraLight|, |Light|, |Normal|, |Medium|, |SemiBold|, |ExtraBold|, and |Black|.\nYou can also create custom font weight by passing an Int to the constructor.</string>
    <string name="text_6_heading">Advanced styling</string>
    <string name="text_6_1">You can add shadow to the text by creating a new |TextStyle| and specifying the color, offset, and blur radius of the shadow.</string>
    <string name="text_5_heading">Text decorations</string>
    <string name="text_5_1">Draw a horizontal line over the text:</string>
    <string name="text_5_2">You can combine text decoration using the |TextDecoration.combine| function or the addition operator:</string>
    <string name="text_7_heading">Advanced styling - multiple styles</string>
    <string name="text_7_1">You can combine different styles in one |Text| using the |AnnotatedString| class. The helper function |buildAnnotatedString| allows you to easily append text fragments with different styles.</string>
    <string name="text_9_heading">Display text from resource</string>
    <string name="text_9_1">The recommended approach to displaying text is using string resources instead of hardcoding the values in code.\nThis allows for easier and less error-prone reuse of the same texts as well as preparing your app for internationalization.</string>
    <string name="hello_world">Hello, World! (in English)</string>
    <string name="text_8_1">You can limit the number of lines displayed for long texts:</string>
    <string name="text_8_2">Additionally, you can also indicate that the text is overflowing:</string>
    <string name="text_3_heading">Changing font</string>
    <string name="text_3_1">Use monospace font:</string>
    <string name="text_3_2">Jetpack Compose also provides other fonts: |Default|, |SansSerif|, |Serif|, and |Cursive|. You can also use your own custom font after importing it into the project.</string>
    <string name="button_1_heading">Creating basic button</string>
    <string name="lesson_button_title">Buttons</string>
    <string name="button_1_1">To create a button, you can use the |Button| composable function.\nIt has two required parameters: the content to display and the callback to invoke when the user clicks the button.</string>
    <string name="button_2_heading">Performing action on click</string>
    <string name="button_2_1">To perform some action when the user clicks the button, you can pass a function to the |onClick| callback.</string>
    <string name="button_2_2">The |remember| and |mutableIntStateOf| will be explained in later lessons.</string>
    <string name="button_3_heading">Types of buttons</string>
    <string name="button_3_1">Jetpack Compose provides 5 predefined types of buttons: filled (default), tonal, outlined, elevated and text.\nYou can one which will fit your app style and its expected beahavoiur.</string>
    <string name="button_4_heading">Icon buttons</string>
    <string name="button_4_1">Another variant of button is the icon button. It ususually contains a single icon (but it can also be something different).\nIt comes in 3 variants: default, filled and outlined.</string>
    <string name="button_5_heading">Toggle buttons</string>
    <string name="button_5_1">Icon buttons can also be used as toggles to cycle between checked and unchecked state on each click.\nThey have two required parameters: the current check state (boolean) and funciton to invoke when the state changes.\nIcon toggle buttons come in 3 variations: filled, tonal and outlined.</string>
    <string name="button_1_2">You can disable button by setting the |enabled|parameter to false.</string>
    <string name="button_6_heading">Customizing colors</string>
    <string name="button_6_1">You can change the colors of a button by creating new |ButtonColors| and passing it to the composable:</string>
    <string name="button_7_heading">Modyfing shape</string>
    <string name="button_7_1">You can change the shape of a button by providing custom one.\nPadding of the content can also be specified by the |contentPadding| parameter.</string>
    <string name="button_8_heading">Border</string>
    <string name="button_8_1">You can add borders to button using the |border| parameter.\nBorder can have solid color or a gradient.</string>
    <string name="lesson_toast_title">Toast messages</string>
    <string name="toast_requires_newer_api">This preview requires API level 30 (Android 11) to work.</string>
    <string name="toast_1_heading">Displaying toast messages</string>
    <string name="toast_2_heading">Adding callbacks</string>
    <string name="toast_3_heading">Cancelling messages</string>
    <string name="lesson_text_field_title">Text field</string>
    <string name="text_field_1_heading">Creating text field</string>
    <string name="text_field_2_heading">Limiting number of lines</string>
    <string name="text_field_3_heading">Disabled and readonly fields</string>
    <string name="text_field_4_heading">Decorating text fields</string>
    <string name="text_field_5_heading">Adding prefix and suffix</string>
    <string name="text_field_6_heading">Visual transformations</string>
    <string name="text_field_7_heading">Custom input</string>
    <string name="text_field_8_heading">IME action</string>
    <string name="text_field_9_heading">Customizing appearance</string>
    <string name="lesson_image_title">Images</string>
    <string name="image_1_heading">Displaying images</string>
    <string name="image_2_heading">Vector graphics</string>
    <string name="image_3_heading">Modifying alpha value</string>
    <string name="image_4_heading">Applying color filter</string>
    <string name="image_5_heading">Tinting</string>
    <string name="image_6_heading">Content scaling</string>
    <string name="lesson_card_title">Cards</string>
    <string name="card_1_heading">Creating card</string>
    <string name="card_2_heading">Card types</string>
    <string name="card_3_heading">Customizing appearance</string>
    <string name="lesson_modifier_title">Using modifiers</string>
    <string name="lorem_ipsum" translatable="false">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque in vulputate mi. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus id velit eget velit blandit vestibulum non sit amet leo. Ut condimentum felis ut ipsum convallis, non cursus lorem pellentesque. Nulla blandit tellus a ipsum aliquam commodo id vitae dolor. Donec cursus consectetur mi ut ornare. Maecenas iaculis metus varius sodales porttitor. In et consequat elit, quis auctor odio. Donec vel dolor et nulla accumsan hendrerit.</string>
    <string name="modifier_1_heading">Applying modifier</string>
    <string name="modifier_2_heading">Order matters</string>
    <string name="modifier_3_heading">Changing size</string>
    <string name="modifier_4_heading">Adding padding</string>
    <string name="modifier_5_heading">Scrolling content</string>
    <string name="modifier_6_heading">Making elements clickable</string>
    <string name="modifier_7_heading">Dragging</string>
    <string name="modifier_8_heading">Animating content size</string>
    <string name="modifier_9_heading">Blurring</string>
    <string name="modifier_10_heading">Clipping shapes</string>
    <string name="modifier_12_heading">Conditional modifier</string>
    <string name="modifier_13_heading">Reusing modifier</string>
    <string name="modifier_11_heading">Accessibility</string>
    <string name="modifier_1_1">Modifiers allow you to decorate or change behaviour of a composable.\nAll of previously described composables have optional parameter: the modifier.</string>
    <string name="modifier_2_1">The order of applied modifier is significant. Each function makes changes to the modifiers returned by the previous function, which results in the sequence affecting the final result.</string>
    <string name="modifier_2_2">In the first example the red background is visibly smaller than in the second, because it is applied after the padding, which limits the space for the following modifiers.</string>
    <string name="modifier_3_1">You can change the size of composables by applying the |size|, |height| or |width| modifiers.\nYou can also fill the whole (possibly partially) space by using the |fillMaxSize|, |fillMaxWidth| or |fillMaxHeight|.</string>
    <string name="modifier_4_1">You can add margins with the |padding| modifier.\nIt can be used to set the same padding on all sides, on horizontal and vertical, or different one on each side.</string>
    <string name="modifier_5_1">If the content doesn\'t, you can enable scrolling of the container.\nModifiers |verticalScroll| and |horizontalScroll| enable scrolling content in corresponding directions.\nYou also need to pass the state of the scroll to these modifiers, usually in the form of |rememberScrollState()| function.</string>
    <string name="modifier_6_1">Any composable can become clickable with the |clickable| modifier.\nYou need to pass function to invoke on each click, similar to buttons.</string>
    <string name="modifier_6_2">It is also possible to invoke different actions on double and long click.\nYou can achieve this by using the |combinedClickable| modifier.</string>
    <string name="modifier_7_1">Composables can also be draggable, by using the |draggable| and |offset| modifiers.\nTo make the dragging work in both axis, you can use the |pointerInput| modifier instead of |draggable| and manually modify the offset in both axis.</string>
    <string name="modifier_8_1">When the content can change its size, you can use |animateContentSize| modifier to allow for a smooth transition.</string>
    <string name="modifier_9_1">You can blur composable with the |blur| modifier.\nIt requires specifying the blur radius and optionally, how to treat the edges of the blur area.</string>
    <string name="modifier_10_1">You can clip content to a specified shape with the |clip| modifier.\nYou can achieve more complex shapes by applying multiple |clip| modifiers.</string>
    <string name="modifier_11_1">You can add accessibility information to your interface by using |semantics| modifier.\nIt can specify the role of particular element and describe it state for accessibility services to use.</string>
    <string name="modifier_12_1">Modifiers can be conditionally applied by using the |Modifier.then| modifier function.</string>
    <string name="modifier_13_1">Modifiers are regular Kotlin objects - you can create one and reuse it in multiple places later.</string>
    <string name="text_field_1_1">Text fields allow users to enter text. To create one you can use composable |TextField|.\nIt has two required parameters: currently displayed text and function invoked on change of inputted value.</string>
    <string name="text_field_1_2">You can add placeholder to display when the inputted value is empty with the |placeholder|. parameter.</string>
    <string name="text_field_2_1">You can limit the text field to only one line by setting the |singleLine| parameter to true.\nYou can also change the minimum and maximum number of visible lines with |minLines| and |maxLines|.</string>
    <string name="text_field_3_1">Parameters |enabled| and |readOnly| can be used to disable the text field and disallow text modifications respectively.</string>
    <string name="text_field_4_1">You can add more visual information to the text field such as icons and labels using |label|, |supportingText|, |leadingIcon| and |trailingIcon| parameters.</string>
    <string name="text_field_5_1">You can also add |prefix| and |suffix| to display around the entered text.</string>
    <string name="text_field_6_1">Text can be transformed visually with the |visualTransformation| parameter. This can be useful, for example, when entering passwords or postal codes.\nJetpack Compose provides ready visual transformation for passwords: |PasswordVisualTransformation|.</string>
    <string name="text_field_6_2">It is possible to create custom visual transformation. The |CustomVisualTransformation| replaces visible letters with numbers 0–9 based on their position.\nNote that the actual text value is unchanged; it still contains exactly what the user entered.</string>
    <string name="text_field_7_1">You can modify the text field to display different keyboard types to the user with the |keyboardOptions| parameter.\nTo make sure that the entered text contains only allowed symbols (e.g. numbers), you can filter the entered text in the |onValueChanged| callback.</string>
    <string name="text_field_8_1">You can change the IME action that is displayed on the keyboard, by creating instance of |KeyboardOptions| with specified IME action, and passing it to the composable.</string>
    <string name="text_field_9_1">You can change the appearance of the text field by passing custom |TextFieldColors| and |TextStyle| to the composable.</string>
    <string name="image_1_1">To display an image you can use |Image| composable.\nIt has two required parameters: the painter that is responsible for drawing the image, usually |painterResource|, and |contentDescription| used by accessibility services.\n|Image| can display png, jpg and webp images.</string>
    <string name="image_2_1">|Image| composable can also display vector graphics.\nThe file describing the graphic should be in xml format.</string>
    <string name="image_3_1">You can modify the alpha value of the displayed image using the |alpha| parameter.</string>
    <string name="image_4_1">Parameter |colorFilter| allows for modifying the color values of each pixel in the image.\nYou can use it to change saturation, shift hue or manually adjust the values.</string>
    <string name="image_5_1">You can also tint images using the |colorFilter| parameter.\nThere are multiple color blend modes available, each resulting in different effects.</string>
    <string name="image_6_1">You can change how an image is scaled inside it bounds using the |contentScale| parameter.\nIf you don\'t specify this parameter, |ContentScale.Fit| will be used as default.</string>
    <string name="card_1_1">Cards acts as a containers for application\'s UI.\nCards typically present single coherent piece of content like a news story in a news app or a message in a communicator app.</string>
    <string name="card_1_2">To create a card you can use the |Card| composable. It has one required parameter: the content to display.</string>
    <string name="card_1_3">Card can be made clickable by providing function to the |onClick| callback parameter.</string>
    <string name="card_2_1">Jetpack Compose provides other variants of the cards: the |ElevatedCard| and |OutlinedCard|.</string>
    <string name="card_3_1">You can customize the colors, shape and border of the card by providing custom values to the |colors|, |shape| and |border| parameters.</string>
    <string name="toast_1_1">A toast is a small popup message that provides feedback about an operation.\nIt takes small amount of space and disappears automatically after a timeout.</string>
    <string name="toast_1_2">To show the toast you first need to instantiate a Toast object.\nYou can do this using |Toast.makeText| method, which takes the following parameters: the |Context| associated with the message, the text to display and the duration of the toast.\nIn Jetpack compose, the context can be easily accessed using the |LocalContext.current| composable.\nAfter creating the toast object, you can use |show| method on it to display it on screen.</string>
    <string name="toast_2_1">You can add callbacks to the toast to know when it is shown and hidden.\nTo do this you can create an object inheriting from |Toast.Callback| and register it using the |addCallback| method.</string>
    <string name="toast_3_1">You can limit the time the toast is visible by calling the |cancel| method to hide it early.</string>

    <string name="quiz_question_1" translatable="false">Which Composable is used to display text in Jetpack Compose?</string>
    <string name="quiz_answer_1_1" translatable="false">Text</string>
    <string name="quiz_answer_1_2" translatable="false">Label</string>
    <string name="quiz_answer_1_3" translatable="false">Paragraph</string>

    <string name="quiz_question_2" translatable="false">How can you change the font size of Text in Jetpack Compose?</string>
    <string name="quiz_answer_2_1" translatable="false">Use the fontModifier</string>
    <string name="quiz_answer_2_2" translatable="false">Use the fontSize parameter in TextStyle</string>
    <string name="quiz_answer_2_3" translatable="false">Text size cannot be changed</string>

    <string name="quiz_question_3" translatable="false">Which parameter would you use to change the color of Text?</string>
    <string name="quiz_answer_3_1" translatable="false">fontColor</string>
    <string name="quiz_answer_3_2" translatable="false">textModifier</string>
    <string name="quiz_answer_3_3" translatable="false">color in TextStyle</string>
    <string name="quiz_question_n_of">Question %1$d of %2$d</string>
    <string name="quiz_check">Check</string>
    <string name="lesson_more_quiz">Go to quiz</string>
    <string name="lesson_more_challenge">Go to challenge</string>
    <string name="code_challenge">Code challenge</string>
    <string name="start_quiz">Start quiz</string>
    <string name="quiz_finished">Quiz finished</string>
    <string name="quiz_answered_correctly_n_of">You answered correctly %1$d out of %2$d questions.</string>
    <string name="quiz_restart">Restart quiz</string>
    <string name="quiz_continue">Continue</string>
    <string name="no_shuffle">Don\'t shuffle</string>
    <string name="shuffle_questions">Shuffle questions</string>
    <string name="shuffle_all">Shuffle questions and answers</string>
    <string name="select_quiz_shuffle">Select shuffling mode</string>
    <string name="quiz_shuffling_mode">Quiz question shuffling</string>
</resources>